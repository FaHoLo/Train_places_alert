import os
import re
import socket
import config
import pickle
import asyncio
import datetime
import logging
import logging.config
from itertools import product
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from dotenv import load_dotenv
load_dotenv()

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from db_map import Base, ActiveSearch, SearchLog

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.files import PickleStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


# db settings
db_filename = os.getenv('DB_FILENAME')
db_engine = create_engine(f'sqlite:///{db_filename}', echo=True)
if not os.path.exists(f'{db_filename}'):
    Base.metadata.create_all(db_engine)
session_factory = sessionmaker(bind=db_engine)
db_session = scoped_session(session_factory)


# bot settings
bot = Bot(token=os.environ['TG_BOT_TOKEN'])
storage = PickleStorage('state_storage.pickle') # TODO Add pickle backup every 30 sec for tg server
dispatcher = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    typing_url = State()
    typing_numbers = State()
    choosing_limit = State()
    searching = State() 


def main():
    place_hunt = asyncio.get_event_loop()
    process = place_hunt.create_task(start_searching())
    executor.start_polling(dispatcher)
    place_hunt.close()

# Hunter
async def start_searching():
    while True:
        try:
            null_session = db_session()
            search_list = null_session.query(ActiveSearch).all()
            null_session.close()
            if not search_list:
                await asyncio.sleep(10)
                continue
            await search_places(search_list)
        except Exception:
            hunter_logger.exception('')
        await asyncio.sleep(5)

async def search_places(search_list):
    for search in search_list:
        if not search.price_limit:
            continue
        answer = await check_search(search)
        if answer:
            await bot.send_message(chat_id=search.chat_id, text=answer)
            await remove_search_from_spreadsheet(search.chat_id)
        await asyncio.sleep(5)

async def check_search(search):
    train_numbers = search.train_numbers.split(', ')
    response = await make_rzd_request(search.url)
    if not response:
        return
    trains_with_places, trains_that_gone, trains_without_places = await collect_trains(response)
    if trains_with_places == 'Bad url':
        return '–ë–∏—Ç–∞—è —Å—Å—ã–ª–∫–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ—á–∏—Ç–∞–π /help –∏ –Ω–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫'
    if not trains_with_places and not trains_that_gone and not trains_with_places:
        return
    answer = await check_for_wrong_train_numbers(train_numbers, trains_with_places, trains_that_gone, trains_without_places)
    if answer:
        return answer
    answer = await check_for_places(train_numbers, trains_with_places, search.price_limit)
    if answer:
        return answer
    answer = await check_for_all_gone(train_numbers, trains_that_gone)
    if answer:
        return answer

async def make_rzd_request(url):
    # ChromeBrowser (heroku offical supports it), easy guide: https://youtu.be/Ven-pqwk3ec?t=184)
    chrome_options = webdriver.ChromeOptions()
    # chrome_options.binary_location =  os.environ.get('GOOGLE_CHROME_BIN')
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--no-sandbox')
    driver = webdriver.Chrome(executable_path=os.environ.get('CHROMEDRIVER_PATH'), options=chrome_options)
    # driver = webdriver.Firefox(executable_path='C:\Program Files\Mozilla Firefox\geckodriver')
    try:
        driver.get(url)
    except TimeoutException:
        driver.close()
        return
    except Exception:
        hunter_logger.exception('')
        driver.close()
        return
    while True:
        data = driver.page_source
        if data.count('–ü–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–µ–∑–¥–∞') < 2:
            break
        await asyncio.sleep(1)
    driver.close()
    return data

async def collect_trains(data):
    if data.find('–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∞') != -1:
        return 'Bad url', None, None

    soup = BeautifulSoup(data, 'html.parser')

    trains_with_places_div = soup.find_all('div', {'class': 'route-item'})
    trains_that_gone_div = soup.find_all('div', {'class': 'route-item__train-is-gone'})
    trains_without_places_div = soup.find_all('div',{'class': 'route-item__train-without-places'})

    trains_with_places = []
    for train_div in trains_with_places_div:
        if train_div in trains_that_gone_div: 
            continue
        if train_div in trains_without_places_div:
            continue
        trains_with_places.append(str(train_div))

    trains_that_gone = [str(train_div) for train_div in trains_that_gone_div]

    trains_without_places = []
    for train_div in trains_without_places_div:
        if train_div in trains_that_gone_div:
            continue
        trains_without_places.append(str(train_div))

    return trains_with_places, trains_that_gone, trains_without_places

async def check_for_wrong_train_numbers(train_numbers, trains_with_places, trains_that_gone, trains_without_places):
    status = 'Not found'
    for train_number in train_numbers:
        for train in trains_with_places:
            if train_number in train:
                status = 'Found'
                break
        if status == 'Found':
            break
        for train in trains_that_gone:
            if train_number in train:
                status = 'Found'
                break
        if status == 'Found':
            break
        for train in trains_without_places:
            if train_number in train:
                status = 'Found'
                break
    if status == 'Not found':
        if len(train_numbers) == 1:
            return '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞, –Ω–µ –Ω–∞—à–µ–ª –µ–≥–æ –≤ —Å–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –ü—Ä–æ—á–∏—Ç–∞–π /help –∏ –Ω–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫'
        return '–ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤, –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –ü—Ä–æ—á–∏—Ç–∞–π /help –∏ –Ω–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫'

async def check_for_places(train_numbers, trains_with_places, price_limit):
    time_pattern = r'route_time\">\d{1,2}:\d{2}'
    for train_data, train_number in product(trains_with_places, train_numbers):
        if train_number not in train_data:
            continue
        time = re.search(time_pattern, train_data)[0][-5:]
        if price_limit == 1:
            return f'–ù–∞—à–ª–∏—Å—å –º–µ—Å—Ç–∞ –≤ –ø–æ–µ–∑–¥–µ {train_number}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ {time}'
        if check_for_satisfying_price(train_data, price_limit):
            return f'–ù–∞—à–ª–∏—Å—å –º–µ—Å—Ç–∞ –≤ –ø–æ–µ–∑–¥–µ {train_number}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ {time}'

def check_for_satisfying_price(train_data, price_limit):
    soup = BeautifulSoup(train_data, 'html.parser')
    html_price_pattern = r'\d{1,3},\d{3}|\d{1:3},\d{3},\d{3}'
    for span_price in soup.find_all('span', {'class': 'route-cartype-price-rub'}):
        html_price = re.search(html_price_pattern, str(span_price))[0]
        if int(html_price.replace(',', '')) <= price_limit:
            return True

async def check_for_all_gone(train_numbers, trains_that_gone):
    gone_trains = []
    for train, train_number in product(trains_that_gone, train_numbers):
        if train_number not in train: 
            continue
        gone_trains.append(train_number)
    if len(gone_trains) == len(train_numbers):
        return '–ú–µ—Å—Ç–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å, –≤—Å–µ –ø–æ–µ–∑–¥–∞ —É—à–ª–∏ üòî'


# Bot
@dispatcher.errors_handler()
async def errors_handler(update, exception):
    bot_logger.error(exception)

@dispatcher.message_handler(state='*', commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    text = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç –†–ñ–î –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–∞—Ö. –û–ø–æ–≤–µ—â—É —Ç–µ–±—è, –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –ø–æ—è–≤—è—Ç—Å—è –∏–ª–∏ –ø–æ–µ–∑–¥ —Ç–∞–∫ –∏ —É–π–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º. –ñ–º–∏ /help'
    await message.answer(text)

@dispatcher.message_handler(state='*', commands=['help'])
async def send_help(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    text = '''
    ‚†Ä 1. –ù–∞–∂–º–∏ /start_search.
    2. –ó–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç https://pass.rzd.ru, –≤—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –¥–∞—Ç—É, —É–±–µ—Ä–∏ –≥–∞–ª–∫—É —Å –ø–æ–ª—è "–¢–æ–ª—å–∫–æ —Å –±–∏–ª–µ—Ç–∞–º–∏" –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ".
    3. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –º–Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    4. –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ (–∏—Ö –≤—Å–µ—Ö –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø–∏—è—Ç—ã–º–∏ –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏). –£—á—Ç–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã, –†–£–°–°–ö–ò–ï –±—É–∫–≤—ã –∏ –∑–Ω–∞—á–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´123*–ê, 456–ï¬ª.
    5. –û—Ç–ø—Ä–∞–≤—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ (—á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤, –∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤). –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å 0.
    –í–∞–∂–Ω–æ! –ü–æ–∏—Å–∫ –º–æ–∂–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /cancel
    –ü—Ä–∏–º–µ—Ä —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    https://pass.rzd.ru/tickets/public/ru?STRUCTURE_ID=7...
    00032, 002–ê, –ï*100
    2500
    '''
    await message.answer(text)

@dispatcher.message_handler(state='*', commands=['cancel'])
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    search_check = await check_for_existing_search(int(message.chat.id))
    if not search_check:
        await message.answer('–ü–æ–∏—Å–∫ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–Ω–∏ –Ω–æ–≤—ã–π /start_search')
    else:
        await remove_search_from_spreadsheet(int(message.chat.id))
        await message.answer('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π /start_search')

    if current_state is not None:
        await state.set_state(None)

async def remove_search_from_spreadsheet(chat_id):
    session = db_session()
    session.query(ActiveSearch).filter_by(chat_id=chat_id).delete()
    session.commit()
    session.close()

@dispatcher.message_handler(state='*', commands=['start_search'])
async def start_search(message: types.Message):
    search_check = await check_for_existing_search(int(message.chat.id))
    if search_check:
        text = '–ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π (/cancel)'
        await message.answer(text)
        return
    text = '''
    –û–∂–∏–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä:
    https://pass.rzd.ru/tickets/public/ru?layer_name=e3-route...
    '''
    await Form.typing_url.set()
    await message.answer(text)

async def check_for_existing_search(chat_id):
    session = db_session()
    if session.query(ActiveSearch).filter_by(chat_id=chat_id).first():
        session.close()
        return True

@dispatcher.message_handler(state=Form.typing_url)
async def get_url(message: types.Message, state: FSMContext):
    url = message.text
    if 'https://pass.rzd.ru/tickets' not in url:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π. –æ–±—ã—á–Ω–æ –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://pass.rzd.ru/tickets...\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòâ')
        return
    chat_id = message.chat.id
    column = 'url'
    await update_db(chat_id, column, url)
    text = '''
    –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å. –ò—Ö –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n00032, 002–ê, –ï*100
    '''
    await Form.next()
    await message.answer(text)

@dispatcher.message_handler(state=Form.typing_numbers)
async def get_numbers(message: types.Message, state: FSMContext):
    train_numbers = message.text
    chat_id = message.chat.id
    column = 'train_numbers'
    await update_db(chat_id, column, train_numbers)
    text = '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–æ–≤. –¶–µ–ª—ã–º —á–∏—Å–ª–æ–º: –±–µ–∑ –∫–æ–ø–µ–µ–∫, –∑–∞–ø—è—Ç—ã—Ö –∏ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n5250\n–ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å 1'
    await Form.next()
    await message.answer(text)

@dispatcher.message_handler(state=Form.choosing_limit)
async def get_limit(message: types.Message, state: FSMContext):
    try:
        price_limit = int(message.text)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –≤–∏–¥–µ –û–î–ù–û–ì–û —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç.–¥. –ù–∞–ø—Ä–∏–º–µ—Ä:\n1070\n–û—Ç–ø—Ä–∞–≤—å 1, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–≤–∞–∂–Ω–∞.')
        return
    chat_id = message.chat.id
    column = 'price_limit'
    await update_db(chat_id, column, price_limit)
    text = '–ü–æ–π–¥—É –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏ /cancel'
    await Form.next()
    await message.answer(text)

async def update_db(chat_id, column, value):
    session = db_session()
    user_search = session.query(ActiveSearch).filter_by(chat_id=chat_id).first()
    if not user_search:
        user_search = ActiveSearch(chat_id=chat_id, query_time=datetime.datetime.now())
    updated_search = update_search(user_search, column, value)
    if column == 'price_limit':
        log_search = SearchLog(
            chat_id = updated_search.chat_id,
            url = updated_search.url,
            train_numbers = updated_search.train_numbers,
            price_limit = updated_search.price_limit,
            query_time = updated_search.query_time,
        )
        session.add(log_search)
    session.add(updated_search)
    session.commit()
    session.close()

def update_search(user_search, column, value):
    if column == 'url':
        user_search.url = value
    if column == 'train_numbers':
        user_search.train_numbers = value
    if column == 'price_limit':
        user_search.price_limit = value
    return user_search

@dispatcher.message_handler(state='*')
async def answer_searching(message: types.Message, state: FSMContext):
    text = '–Ø –±–æ—Ç. –û–±—â–∞—é—Å—å –Ω–∞ —è–∑—ã–∫–µ –∫–æ–º–∞–Ω–¥:\n/help - –ø–æ–º–æ—â—å\n/start_search - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫üòî'
    await message.answer(text)


if __name__ == '__main__':
    logging.config.dictConfig(config.LOGGER_CONFIG)
    bot_logger = logging.getLogger('trains_bot_logger')
    bot_logger.setLevel('WARNING')
    hunter_logger = logging.getLogger('place_hunter_logger')
    hunter_logger.setLevel('WARNING')
    main()
