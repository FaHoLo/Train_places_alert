import datetime
import json
import logging
import logging.config
import os
from textwrap import dedent

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates
from dotenv import load_dotenv

import utils


load_dotenv()

bot_logger = logging.getLogger('trains_bot_logger')

log_bot = utils.get_logger_bot()
LOGGER_NAME = 'trains_bot_logger'

redis_db = utils.get_db_connetion()


# bot settings
proxy = os.environ.get('TG_PROXY')
bot = Bot(token=os.environ['TG_BOT_TOKEN'], proxy=proxy)
dispatcher = Dispatcher(
    bot=bot,
    storage=RedisStorage2(
        host=os.environ['DB_HOST'],
        port=os.environ['DB_PORT'],
        password=os.environ['DB_PASS']
    ),
)


class Form(StatesGroup):
    typing_url = State()
    typing_numbers = State()
    choosing_limit = State()
    searching = State()


def main():
    executor.start_polling(dispatcher)


@dispatcher.errors_handler()
async def errors_handler(update, exception):
    if type(exception) == TerminatedByOtherGetUpdates:
        return True

    name = 'train_alert_bot_logger'
    log_traceback = utils.get_log_traceback(name)

    await utils.send_error_log_async_to_telegram(log_bot, log_traceback)
    return True


@dispatcher.message_handler(state='*', commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    text = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç –†–ñ–î –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–∞—Ö. –û–ø–æ–≤–µ—â—É —Ç–µ–±—è, –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –ø–æ—è–≤—è—Ç—Å—è –∏–ª–∏ –ø–æ–µ–∑–¥–∞ —Ç–∞–∫ –∏ —É–π–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏. –ñ–º–∏ /help'
    await message.answer(text)


@dispatcher.message_handler(state='*', commands=['help'])
async def send_help(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    first_text = dedent('''\
    –Ø –æ–ø–æ–≤–µ—â—É —Ç–µ–±—è, –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –ø–æ—è–≤—è—Ç—Å—è –∏–ª–∏ –ø–æ–µ–∑–¥–∞ —Ç–∞–∫ –∏ —É–π–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏, –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–¥–æ—á–∏—Ç–∞–π –¥–æ –∫–æ–Ω—Ü–∞):
    1. –ù–∞–∂–º–∏ /start_search.
    2. –ó–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç https://pass.rzd.ru, –≤—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –¥–∞—Ç—É, —É–±–µ—Ä–∏ –≥–∞–ª–∫—É —Å –ø–æ–ª—è ¬´–¢–æ–ª—å–∫–æ —Å –±–∏–ª–µ—Ç–∞–º–∏¬ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª.
    3. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –º–Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    4. –í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ (–∏—Ö –≤—Å–µ—Ö –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø–∏—è—Ç—ã–º–∏ –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏).
    –£—á—Ç–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã, –†–£–°–°–ö–ò–ï –±—É–∫–≤—ã –∏ –∑–Ω–∞—á–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´123*–ê, 456–ï¬ª.
    5. –û—Ç–ø—Ä–∞–≤—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤, –∑–Ω–∞–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤). –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å ¬´1¬ª.
    ''')
    second_text = dedent('''
    –ü–æ–∏—Å–∫ –º–æ–∂–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /cancel
    –ü—Ä–∏–º–µ—Ä —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    https://pass.rzd.ru/tickets/public/ru?STRUCTURE_ID=7... (–¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞)
    00032, 002–ê, –ï*100
    2500
    ''')
    await message.answer(first_text, disable_web_page_preview=True)
    await message.answer(second_text, disable_web_page_preview=True)


@dispatcher.message_handler(state='*', commands=['cancel'])
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    search_canceld_text = '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π /start_search'

    if current_state == 'Form:typing_url':
        await message.answer(search_canceld_text)
    else:
        if not await check_for_existing_search(f'tg-{message.chat.id}'):
            await message.answer('–ü–æ–∏—Å–∫ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–Ω–∏ –Ω–æ–≤—ã–π /start_search')
        else:
            await utils.remove_search_from_db(f'tg-{message.chat.id}')
            await message.answer(search_canceld_text)

    if current_state is not None:
        await state.set_state(None)


@dispatcher.message_handler(state='*', commands=['start_search'])
async def start_search(message: types.Message):
    if await check_for_existing_search(f'tg-{message.chat.id}'):
        text = '–ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π (/cancel)'
        await message.answer(text)
        return
    text = dedent('''\
    –û–∂–∏–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä:
    https://pass.rzd.ru/tickets/public/ru?layer_name=e3-route...
    ''')
    await Form.typing_url.set()
    await message.answer(text)


async def check_for_existing_search(chat_id):
    if redis_db.exists(chat_id):
        return True


@dispatcher.message_handler(state=Form.typing_url)
async def get_url(message: types.Message, state: FSMContext):
    url = message.text
    if 'https://pass.rzd.ru/tickets' not in url:
        await message.answer('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π. –æ–±—ã—á–Ω–æ –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://pass.rzd.ru/tic...\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòâ')
        return

    got_url_time = str(datetime.datetime.now())
    redis_db.hmset(
        f'tg-{message.chat.id}',
        {
            'url': url,
            'id': f'tg-{message.chat.id}',
            'got_url_time': got_url_time
        }
    )

    text = '''
    –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å. –ò—Ö –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n00032, 002–ê, –ï*100
    '''
    await Form.next()
    await message.answer(text)


@dispatcher.message_handler(state=Form.typing_numbers)
async def get_numbers(message: types.Message, state: FSMContext):
    train_numbers = message.text
    redis_db.hset(f'tg-{message.chat.id}', 'train_numbers', train_numbers)

    text = '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–æ–≤. –¶–µ–ª—ã–º —á–∏—Å–ª–æ–º: –±–µ–∑ –∫–æ–ø–µ–µ–∫, –∑–∞–ø—è—Ç—ã—Ö –∏ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n5250\n–ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å 1'
    await Form.next()
    await message.answer(text)


@dispatcher.message_handler(state=Form.choosing_limit)
async def get_limit(message: types.Message, state: FSMContext):
    try:
        price_limit = int(message.text)
    except ValueError:
        text = dedent('''–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –≤–∏–¥–µ –û–î–ù–û–ì–û —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç.–¥. –ù–∞–ø—Ä–∏–º–µ—Ä:
        1070
        –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–æ—Ç–ø—Ä–∞–≤—å 1, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–≤–∞–∂–Ω–∞)
        ''')
        await message.answer(text)
        return
    chat_id = f'tg-{message.chat.id}'
    start_search_time = str(datetime.datetime.now())
    redis_db.hmset(
        f'tg-{message.chat.id}',
        {
            'price_limit': price_limit,
            'start_search_time': start_search_time
        }
    )
    logs_key = os.getenv('LOGS_KEY', 'search_logs')
    update_search_logs(chat_id, logs_key)

    text = '–ü–æ–π–¥—É –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫, –Ω–∞–∂–º–∏ /cancel'
    await Form.next()
    await message.answer(text)


def update_search_logs(chat_id, logs_key):
    data_of_search = redis_db.hgetall(chat_id)
    dump = json.dumps({key.decode('UTF-8'): value.decode('UTF-8') for key, value in data_of_search.items()})
    redis_db.rpush(logs_key, dump)


@dispatcher.message_handler(state='*')
async def answer_searching(message: types.Message, state: FSMContext):
    text = '–Ø –±–æ—Ç. –û–±—â–∞—é—Å—å –Ω–∞ —è–∑—ã–∫–µ –∫–æ–º–∞–Ω–¥:\n/help - –ø–æ–º–æ—â—å\n/start_search - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫üòî'
    await message.answer(text)


if __name__ == "__main__":
    main()
